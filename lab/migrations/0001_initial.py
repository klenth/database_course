# Generated by Django 3.2 on 2021-07-01 23:02

from django.db import migrations, models
import django.db.models.deletion
import lab.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('course', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentProblemScore',
            fields=[
                ('id', models.CharField(max_length=65, primary_key=True, serialize=False)),
                ('score', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'custom_student_problem_scores',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('enabled', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labs', to='course.course')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, default='', max_length=100)),
                ('prompt', models.TextField(blank=True, default='')),
                ('starter_code', models.TextField(blank=True, default='')),
                ('solution', models.TextField(blank=True, default='')),
                ('after_code', models.TextField(blank=True, default='')),
                ('enabled', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProblemSchema',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('file', models.FileField(default=None, null=True, upload_to='schema/%Y/%m/%d/')),
                ('filename', models.CharField(default=None, max_length=100, null=True)),
                ('status', models.CharField(choices=[('M', 'Missing'), ('P', 'Processing'), ('V', 'Valid'), ('I', 'Invalid')], default='M', max_length=1)),
                ('table_names', models.CharField(blank=True, default='', max_length=200)),
            ],
            options={
                'verbose_name': 'Problem schema',
                'verbose_name_plural': 'Problem schemata',
            },
        ),
        migrations.CreateModel(
            name='ProblemTableData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('data_file', models.FileField(upload_to='table_data/%Y/%m/%d/')),
                ('data_filename', models.CharField(max_length=100)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_data', to='lab.problem')),
            ],
            options={
                'verbose_name': 'Problem table data',
                'verbose_name_plural': 'Problem table data',
                'ordering': ('data_filename',),
            },
        ),
        migrations.CreateModel(
            name='ProblemTestCase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, default='', max_length=100)),
                ('description', models.CharField(blank=True, default='', max_length=100)),
                ('points', models.PositiveSmallIntegerField(default=1)),
                ('number', models.PositiveSmallIntegerField(default=0)),
                ('result_data_file', models.FileField(default=None, null=True, upload_to='correct/%Y/%m/%d/')),
                ('type', models.CharField(choices=[('D', 'Table data'), ('N', 'Column names')], default='D', max_length=1)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='lab.problem')),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='ProblemTestCaseTableData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_name', models.CharField(max_length=40)),
                ('table_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='lab.problemtabledata')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_data_set', to='lab.problemtestcase')),
            ],
            options={
                'verbose_name': 'Problem test case table data',
                'verbose_name_plural': 'Problem test case table data',
                'ordering': ('table_name',),
            },
        ),
        migrations.CreateModel(
            name='ProblemOnLab',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_number', models.PositiveSmallIntegerField(default=0)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.lab')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.problem')),
            ],
            options={
                'verbose_name': 'Problem on lab',
                'verbose_name_plural': 'Problems on labs',
                'ordering': ('problem_number',),
            },
        ),
        migrations.CreateModel(
            name='ProblemAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid1, primary_key=True, serialize=False)),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField()),
                ('score', models.PositiveSmallIntegerField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='lab.problem')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='course.student')),
            ],
            options={
                'ordering': ('when',),
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='schema',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='referenced_problems', to='lab.problemschema'),
        ),
        migrations.AddField(
            model_name='lab',
            name='problems',
            field=models.ManyToManyField(through='lab.ProblemOnLab', to='lab.Problem'),
        ),
        migrations.CreateModel(
            name='AttemptResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_file', models.FileField(upload_to='attempt/%Y/%m/%d/')),
                ('score', models.PositiveSmallIntegerField()),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='lab.problemattempt')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='lab.problemtestcase')),
            ],
            options={
                'ordering': ('test_case__number',),
            },
        ),
        migrations.CreateModel(
            name='AccountSetupLink',
            fields=[
                ('id', models.CharField(default=lab.models._random_link_id, max_length=32, primary_key=True, serialize=False)),
                ('expiration', models.DateTimeField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.student')),
            ],
        ),
        migrations.AddConstraint(
            model_name='problemtestcasetabledata',
            constraint=models.UniqueConstraint(fields=('test_case', 'table_name'), name='unique_mapping_for_table'),
        ),
        migrations.AddConstraint(
            model_name='problemonlab',
            constraint=models.UniqueConstraint(fields=('problem',), name='problem_unique'),
        ),
        migrations.AddConstraint(
            model_name='lab',
            constraint=models.UniqueConstraint(fields=('course', 'title'), name='lab_title_unique'),
        ),
        migrations.AddConstraint(
            model_name='attemptresults',
            constraint=models.UniqueConstraint(fields=('attempt', 'test_case'), name='attempt_results_unique'),
        ),
    ]
